const BACKEND_URL="http://localhost:13414",FRONT_URL="http://localhost:37866",GET="GET",POST="POST",PATCH="PATCH",DELETE="DELETE",OK=200,CREATED=201,NO_CONTENT=204,BAD_REQUEST=400,UNAUTHORIZED=401,FORBIDDEN=403,NOT_FOUND=404,CONFLICT=409,INTERNAL_SERVER_ERROR=500,FAIL_FETCH="fail_fetch",REQUEST_SUCCESS="request_success",LOGIN_REQUIRED="login_required",LOGIN="login",ALREADY_LOGIN="already_login",LOGOUT="logout",SIGN_UP="sign_up",INVALID_BODY="invalid_body",PW_MISMATCHED="pw_mismatched",NEW_PW_CONFIRM_MISMATCHED="pw/pw_confirm_mismatched",ONLY_IMAGE="only_jpg,jpeg,gjf,png(upper_5MB)_format_can_be_uploaded",DUPLICATED_NICKNAME="duplicated_nickname",NOT_EXIST="not_exist",NO_COMMENT="no_comment",FAVORITE="favorite +1",CANCEL_FAVORITE="cancel_favorite",NOT_AUTHORIZATION="not_authorization",NO_REGISTERED_INFORMATION="no_registered_information",INFO="info",ERROR="error",SUCCESS="success",WARNING="warning",QUESTION="question",CHECK="check";async function getSignUpGuide(){try{const e={mode:"cors",credentials:"include"},t=await fetch(`${BACKEND_URL}/user/sign-up/guide`,e);if(t.status===OK){return await t.text()}return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function signUpRequest(e,t,n,o,r,i,s){try{const a={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({id:e,pw:t,confirmPw:n,name:o,nickname:r,phoneNumber:i,gender:s})},c=await fetch(`${BACKEND_URL}/user/sign-up`,a);return await c.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function dropOutRequest(){try{const e={mode:"cors",method:DELETE,credentials:"include",headers:{"Access-Control-Allow-Headers":" Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"}},t=await fetch(`${BACKEND_URL}/user/drop-out`,e);if(204===t.status)return{state:REQUEST_SUCCESS};return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function loginRequest(e,t){try{const n={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type"},body:JSON.stringify({id:e,pw:t})},o=await fetch(`${BACKEND_URL}/user/login`,n);return await o.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function logoutRequest(){try{const e={mode:"cors",method:POST,credentials:"include"},t=await fetch(`${BACKEND_URL}/user/logout`,e);return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getUserLibrary(){try{const e={mode:"cors",credentials:"include"},t=await fetch(`${BACKEND_URL}/user/user-lib`,e);return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function reqRegisterUserLibrary(e){try{const t={mode:"cors",method:PATCH,credentials:"include"},n=await fetch(`${BACKEND_URL}/user/user-lib?libraryIndex=${e}`,t);if(n.status===OK)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function deleteUserLibrary(e){try{const t={mode:"cors",method:DELETE,credentials:"include"},n=await fetch(`${BACKEND_URL}/user/user-lib?libraryIndex=${e}`,t);return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editNicknameRequest(e){try{const t={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({nickname:e})},n=await fetch(`${BACKEND_URL}/user/profile/nickname`,t);if(n.status===OK)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editProfileImageRequest(e){try{const t={mode:"cors",method:PATCH,credentials:"include",body:e},n=await fetch(`${BACKEND_URL}/user/profile/profileImage`,t);if(n.status===OK)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editContactRequest(e){try{const t={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({phoneNumber:e})},n=await fetch(`${BACKEND_URL}/user/new-contact`,t);if(n.status===OK)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editPwRequest(e,t,n){try{const o={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({pw:e,newPw:t,confirmPw:n})},r=await fetch(`${BACKEND_URL}/user/new-pw`,o);if(r.status===OK)return{state:REQUEST_SUCCESS};return await r.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getUserInfo(){try{const e={mode:"cors",credentials:"include"},t=await fetch(`${BACKEND_URL}/user/info`,e);return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function sweetAlert(e,t,n,o){let r=!1;if(e===INFO){const e=await Swal.fire({title:t,text:n,icon:"info",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(r=!0),r}if(e===SUCCESS){const e=await Swal.fire({title:t,text:n,icon:"success",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(r=!0),r}if(e===WARNING){if(o){const e=await Swal.fire({title:t,text:n,icon:"warning",confirmButtonColor:"#ffa07a",footer:o});return(e.isConfirmed||e.isDismissed)&&(r=!0),r}{const e=await Swal.fire({title:t,text:n,icon:"warning",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(r=!0),r}}if(e===ERROR){if(o){const e=await Swal.fire({title:t,text:n,icon:"error",confirmButtonColor:"#ffa07a",footer:o});return(e.isConfirmed||e.isDismissed)&&(r=!0),r}{const e=await Swal.fire({title:t,text:n,icon:"error",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(r=!0),r}}if(e===QUESTION){const e=await Swal.fire({title:t,text:n,icon:"question",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(r=!0),r}if(e===CHECK){Swal.mixin({toast:!0,position:"top-end",showConfirmButton:!1,timer:3e3,timerProgressBar:!0,didOpen:e=>{e.addEventListener("mouseenter",Swal.stopTimer),e.addEventListener("mouseleave",Swal.resumeTimer)}}).fire({icon:n,title:t})}}async function checkLogin(){if((await getUserInfo()).state===LOGIN_REQUIRED){if(await sweetAlert(WARNING,"로그인 필요","로그인이 필요한 기능입니다.")){const e="/user/login";location.href=e}}}async function editPw(e,t,n){const o=await editPwRequest(e,t,n);if(o.state===REQUEST_SUCCESS){if(await sweetAlert(SUCCESS,"비밀번호 수정 성공","홈페이지로 이동합니다")){const e="/authorized";location.href=e}}else if(o.state===PW_MISMATCHED)await sweetAlert(WARNING,"비밀번호 수정 실패","현재 비밀번호가 일치하지 않습니다.");else if(o.state===NEW_PW_CONFIRM_MISMATCHED)await sweetAlert(WARNING,"비밀번호 수정 실패","새 비밀번호와 비밀번호 확인이 일치하지 않습니다");else if(o.state!==PW_MISMATCHED&&o.state!==NEW_PW_CONFIRM_MISMATCHED){if(await sweetAlert(ERROR,"비밀번호 수정 실패","예상치 못한 오류입니다."`서버 메세지: ${o.state}`)){const e="/";location.href=e}}}function checkValidation(e,t){t.value===e.value?e.setCustomValidity(""):e.setCustomValidity("새 비밀번호와 새 비밀번호확인이 일치하지 않습니다"),e.reportValidity()}