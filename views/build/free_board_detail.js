const BACKEND_URL="http://localhost:13414",FRONT_URL="http://localhost:37866",GET="GET",POST="POST",PATCH="PATCH",DELETE="DELETE",OK=200,CREATED=201,NO_CONTENT=204,BAD_REQUEST=400,UNAUTHORIZED=401,FORBIDDEN=403,NOT_FOUND=404,CONFLICT=409,INTERNAL_SERVER_ERROR=500,FAIL_FETCH="fail_fetch",REQUEST_SUCCESS="request_success",LOGIN_REQUIRED="login_required",LOGIN="login",ALREADY_LOGIN="already_login",LOGOUT="logout",SIGN_UP="sign_up",INVALID_BODY="invalid_body",PW_MISMATCHED="pw_mismatched",NEW_PW_CONFIRM_MISMATCHED="pw/pw_confirm_mismatched",ONLY_IMAGE="only_jpg,jpeg,gjf,png(upper_5MB)_format_can_be_uploaded",DUPLICATED_NICKNAME="duplicated_nickname",NOT_EXIST="not_exist",NO_COMMENT="no_comment",FAVORITE="favorite +1",CANCEL_FAVORITE="cancel_favorite",NOT_AUTHORIZATION="not_authorization",NO_REGISTERED_INFORMATION="no_registered_information",INFO="info",ERROR="error",SUCCESS="success",WARNING="warning",QUESTION="question",CHECK="check";async function getSignUpGuide(){try{const e={mode:"cors",credentials:"include"},t=await fetch(`${BACKEND_URL}/user/sign-up/guide`,e);if(t.status===OK){return await t.text()}return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function signUpRequest(e,t,n,o,a,s,r){try{const i={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({id:e,pw:t,confirmPw:n,name:o,nickname:a,phoneNumber:s,gender:r})},c=await fetch(`${BACKEND_URL}/user/sign-up`,i);return await c.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function dropOutRequest(){try{const e={mode:"cors",method:DELETE,credentials:"include",headers:{"Access-Control-Allow-Headers":" Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"}},t=await fetch(`${BACKEND_URL}/user/drop-out`,e);if(204===t.status)return{state:REQUEST_SUCCESS};return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function loginRequest(e,t){try{const n={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type"},body:JSON.stringify({id:e,pw:t})},o=await fetch(`${BACKEND_URL}/user/login`,n);return await o.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function logoutRequest(){try{const e={mode:"cors",method:POST,credentials:"include"},t=await fetch(`${BACKEND_URL}/user/logout`,e);return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getUserLibrary(){try{const e={mode:"cors",credentials:"include"},t=await fetch(`${BACKEND_URL}/user/user-lib`,e);return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function reqRegisterUserLibrary(e){try{const t={mode:"cors",method:PATCH,credentials:"include"},n=await fetch(`${BACKEND_URL}/user/user-lib?libraryIndex=${e}`,t);if(n.status===OK)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function deleteUserLibrary(e){try{const t={mode:"cors",method:DELETE,credentials:"include"},n=await fetch(`${BACKEND_URL}/user/user-lib?libraryIndex=${e}`,t);return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editNicknameRequest(e){try{const t={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({nickname:e})},n=await fetch(`${BACKEND_URL}/user/profile/nickname`,t);if(n.status===OK)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editProfileImageRequest(e){try{const t={mode:"cors",method:PATCH,credentials:"include",body:e},n=await fetch(`${BACKEND_URL}/user/profile/profileImage`,t);if(n.status===OK)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editContactRequest(e){try{const t={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({phoneNumber:e})},n=await fetch(`${BACKEND_URL}/user/new-contact`,t);if(n.status===OK)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editPwRequest(e,t,n){try{const o={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({pw:e,newPw:t,confirmPw:n})},a=await fetch(`${BACKEND_URL}/user/new-pw`,o);if(a.status===OK)return{state:REQUEST_SUCCESS};return await a.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getUserInfo(){try{const e={mode:"cors",credentials:"include"},t=await fetch(`${BACKEND_URL}/user/info`,e);return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getRecentBoard(){try{const e={mode:"cors",credentials:"include"},t=await fetch(`${BACKEND_URL}/board/get`,e),n=await t.json();return t.status===OK?n[0]:n}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getEntireBoard(e){try{let t;const n={mode:"cors",credentials:"include"};t=void 0===e?await fetch(`${BACKEND_URL}/board/get/free-bulletin`,n):await fetch(`${BACKEND_URL}/board/get/free-bulletin?page=${e}`,n);return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getDetailBoard(e){try{const t={mode:"cors",credentials:"include"},n=await fetch(`${BACKEND_URL}/board/get/free-bulletin/${e}`,t),o=await n.json();return n.status===OK&&(o.state=REQUEST_SUCCESS),o}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function writePostRequest(e,t,n){try{const o=[],a=n.split("#");a.shift();for(let e of a){const t={content:e};o.push(t)}const s={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({category:"자유게시판",postTitle:e,postContent:t,tags:o})},r=await fetch(`${BACKEND_URL}/board/write`,s);if(201===r.status)return{state:REQUEST_SUCCESS};return await r.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getPostRequest(e){try{const t={mode:"cors",method:GET,credentials:"include"},n=await fetch(`${BACKEND_URL}/board/write?boardIndex=${e}`,t),o=await n.json();return n.status===OK&&(o.state=REQUEST_SUCCESS),o}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editPostRequest(e,t,n,o){try{const a=[],s=o.split("#");s.shift();for(let e of s){const t={content:e};a.push(t)}const r={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({category:"자유게시판",postTitle:t,postContent:n,tags:a})},i=await fetch(`${BACKEND_URL}/board/edit?boardIndex=${e}`,r);if(i.status===OK)return{state:REQUEST_SUCCESS};return i.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function deletePostRequest(e){try{const t={mode:"cors",method:DELETE,credentials:"include"},n=await fetch(`${BACKEND_URL}/board/delete?boardIndex=${e}`,t);if(204===n.status)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function favoritePostRequest(e){try{const t={mode:"cors",method:PATCH,credentials:"include"},n=await fetch(`${BACKEND_URL}/board/like?boardIndex=${e}`,t);return n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getSearchBoard(e,t,n){try{let o;const a={mode:"cors",method:GET,credentials:"include"};o=void 0===n?await fetch(`${BACKEND_URL}/board/search/free-bulletin?searchOption=${e}&searchContent=${t}`,a):await fetch(`${BACKEND_URL}/board/search/free-bulletin?searchOption=${e}&searchContent=${t}&page=${n}`,a);return o.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function userPostRequest(e){try{let t;const n={mode:"cors",method:GET,credentials:"include"};t=void 0===e?await fetch(`${BACKEND_URL}/board/user`,n):await fetch(`${BACKEND_URL}/board/user?page=${e}`,n);return t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function writeCommentRequest(e,t,n){try{let o;const a={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({content:t})};o=void 0===n?await fetch(`${BACKEND_URL}/comment/post?boardIndex=${e}`,a):await fetch(`${BACKEND_URL}/comment/post?boardIndex=${e}&parentIndex=${n}`,a);if(201===o.status)return{state:REQUEST_SUCCESS};return await o.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getDetailComment(e,t){try{const n={mode:"cors",credentials:"include"};if(void 0===t){const t=await fetch(`${BACKEND_URL}/comment?boardIndex=${e}`,n);return await t.json()}const o=await fetch(`${BACKEND_URL}/comment?boardIndex=${e}&page=${t}`,n);return await o.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getComment(e,t){try{const n={mode:"cors",method:GET,credentials:"include"},o=await fetch(`${BACKEND_URL}/comment/edit?boardIndex=${e}&commentIndex=${t}`,n);return await o.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editCommentRequest(e,t,n){try{const o={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({content:n})},a=await fetch(`${BACKEND_URL}/comment/edit?boardIndex=${e}&commentIndex=${t}`,o);if(a.status===OK)return{state:REQUEST_SUCCESS};return await a.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function deleteCommentRequest(e,t){const n={mode:"cors",method:DELETE,credentials:"include"},o=await fetch(`${BACKEND_URL}/comment/delete?boardIndex=${e}&commentIndex=${t}`,n);if(204===o.status)return{state:REQUEST_SUCCESS};return await o.json()}async function userCommentRequest(e){try{const t={mode:"cors",method:GET,credentials:"include"};if(void 0===e){const e=await fetch(`${BACKEND_URL}/comment/user`,t);return await e.json()}const n=await fetch(`${BACKEND_URL}/comment/user?page=${e}`,t);return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function sweetAlert(e,t,n,o){let a=!1;if(e===INFO){const e=await Swal.fire({title:t,text:n,icon:"info",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(a=!0),a}if(e===SUCCESS){const e=await Swal.fire({title:t,text:n,icon:"success",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(a=!0),a}if(e===WARNING){if(o){const e=await Swal.fire({title:t,text:n,icon:"warning",confirmButtonColor:"#ffa07a",footer:o});return(e.isConfirmed||e.isDismissed)&&(a=!0),a}{const e=await Swal.fire({title:t,text:n,icon:"warning",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(a=!0),a}}if(e===ERROR){if(o){const e=await Swal.fire({title:t,text:n,icon:"error",confirmButtonColor:"#ffa07a",footer:o});return(e.isConfirmed||e.isDismissed)&&(a=!0),a}{const e=await Swal.fire({title:t,text:n,icon:"error",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(a=!0),a}}if(e===QUESTION){const e=await Swal.fire({title:t,text:n,icon:"question",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(a=!0),a}if(e===CHECK){Swal.mixin({toast:!0,position:"top-end",showConfirmButton:!1,timer:3e3,timerProgressBar:!0,didOpen:e=>{e.addEventListener("mouseenter",Swal.stopTimer),e.addEventListener("mouseleave",Swal.resumeTimer)}}).fire({icon:n,title:t})}}let commentPage=2;async function getBoardIndex(){return location.href.split(`${FRONT_URL}/board/`)[1]}async function detailBoard(){const e=await getBoardIndex(),t=await getDetailBoard(e);if(t.state===NOT_EXIST){await sweetAlert(WARNING,"존재하지 않는 게시글","게시글 목록으로 이동")&&(location.href="/board")}else if(t.state===REQUEST_SUCCESS){document.getElementsByClassName("freeBoard__board--title")[0].innerHTML=`${t.dataOfBoard.postTitle}`,document.getElementsByClassName("freeBoard__board--viewCount")[0].innerHTML=`<img class="freeBoard__board--img" src="/views/img/view.png" alt="조회수 아이콘" /> ${t.dataOfBoard.viewCount}`,document.getElementsByClassName("freeBoard__board--favoriteCount")[0].innerHTML=`<img class="freeBoard__board--img" src="/views/img/love.png" alt="좋아요 아이콘" /> ${t.dataOfBoard.favoriteCount}`,document.getElementsByClassName("freeBoard__board--content")[0].innerHTML=`${t.dataOfBoard.postContent}`,document.getElementsByClassName("freeBoard__board--createDate")[0].innerHTML=`${t.dataOfBoard.createDate}`;const e=t.dataOfTag.length;for(let n=0;n<5;++n)n>=e?document.getElementsByClassName("freeBoard__board--tag")[n].style.display="none":document.getElementsByClassName("freeBoard__board--tag")[n].innerHTML=`# ${t.dataOfTag[n].tag}`;if(document.getElementsByClassName("freeBoard__user--nickname")[0].innerHTML=`${t.dataOfUser.nickname}`,t.dataOfUser.isProfileImage){const e=t.dataOfUser.profileImage,n=t.dataOfUser.mime;document.getElementsByClassName("freeBoard__user--profileImage")[0].innerHTML=`<img class="freeBoard__user--profileImageImg" src="data:${n};base64,${e}" alt="글 작성한 유저 프로필 사진">`}const n=await getUserInfo();n!==LOGIN_REQUIRED&&n.userIndex===t.dataOfUser.userIndex||(document.getElementsByClassName("container__freeBoard--authorization")[0].style.display="none")}else await sweetAlert(ERROR,"게시글 불러오기 실패","예상치 못한 에러입니다",`서버 메시지: ${t.state}`),location.href="/board"}async function favoritePost(){const e=await getBoardIndex(),t=await favoritePostRequest(e);if(t.state===LOGIN_REQUIRED){await sweetAlert(WARNING,"로그인 필요","새 창에서 로그인 해주세요")&&window.open("/user/login")}else if(t.state===NOT_EXIST){await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제되거나 존재하지 않는 게시글입니다.")&&(location.href="/board")}else t.state===FAVORITE?await sweetAlert(CHECK,"좋아요 +1","success"):t.state===CANCEL_FAVORITE?await sweetAlert(CHECK,"좋아요 취소","success"):await sweetAlert(ERROR,"좋아요 요청 실패","예상치 못한 에러입니다",`서버 메시지: ${t.state}`)}async function deletePost(){const e=await getBoardIndex(),t=await deletePostRequest(e);if(t.state===LOGIN_REQUIRED){await sweetAlert(WARNING,"로그인 필요","로그인창으로갑니다.")&&(location.href="/user/login")}else if(t.state===NOT_EXIST){await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제되거나 존재하지 않는 게시글입니다.")&&(location.href="/board")}else if(t.state===NOT_AUTHORIZATION){await sweetAlert(WARNING,"권한이 없습니다.","해당 게시글을 작성한 유저가 아닙니다.")&&(location.href="/board")}else if(t.state===REQUEST_SUCCESS){await sweetAlert(SUCCESS,"게시글 삭제 성공","게시글 목록으로 돌아갑니다.")&&(location.href="/board")}else{await sweetAlert(ERROR,"게시물 삭제 오류","게시글 목록으로 돌아갑니다.",`서버 메세지: ${t.state}`)&&(location.href="/board")}}async function editPage(){const e=await getBoardIndex();location.href=`/board/write?boardIndex=${e}`}async function detailComment(){const e=await getBoardIndex(),t=await getDetailComment(e);if(t.state===NOT_EXIST){await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제되거나 존재하지 않는 게시글입니다.")&&(location.href="/board")}else if(t.state===NO_COMMENT){const e=document.createElement("li");e.classList.add("freeBoard__rootComment"),e.style.border="none",document.getElementsByClassName("freeBoard__comment")[0].appendChild(e);const t=document.createElement("p");t.classList.add("freeBoard__rootComment--nickname"),t.textContent="댓글이 없습니다",document.getElementsByClassName("freeBoard__rootComment")[0].appendChild(t)}else if(void 0!==t[0])for(let e of t){const{commentIndex:t,userIndex:n,isRoot:o,isDeleted:a,nickname:s,commentContent:r,createDate:i}=e;await addComment(t,n,o,a,s,r,i)}else{await sweetAlert(ERROR,"댓글 불러오기 실패","예상치 못한 에러입니다",`서버 메시지: ${t.state}`)&&(location.href="/board")}}async function addComment(e,t,n,o,a,s,r){if(n){const n=document.createElement("li");n.classList.add("freeBoard__rootComment"),document.getElementsByClassName("freeBoard__comment")[0].appendChild(n);const i=document.getElementsByClassName("freeBoard__rootComment").length-1,c=document.createElement("p");c.classList.add("freeBoard__rootComment--nickname"),c.textContent=a,document.getElementsByClassName("freeBoard__rootComment")[i].appendChild(c);const l=document.createElement("p");l.classList.add("freeBoard__rootComment--content"),o&&(l.textContent="삭제된 댓글입니다."),o||(l.textContent=s),document.getElementsByClassName("freeBoard__rootComment")[i].appendChild(l);const d=document.createElement("p");d.classList.add("freeBoard__rootComment--createDate"),d.textContent=r,document.getElementsByClassName("freeBoard__rootComment")[i].appendChild(d);const m=document.createElement("section");m.classList.add("button__comment"),document.getElementsByClassName("freeBoard__rootComment")[i].appendChild(m);const u=document.getElementsByClassName("freeBoard__rootComment").length+document.getElementsByClassName("freeBoard__childComment").length-1,C=await getUserInfo(),E=document.createElement("button");E.classList.add("button__comment--edit"),E.setAttribute("commentIndex",e),E.textContent="수정하기",E.setAttribute("onclick","editComment(this.getAttribute('commentIndex'))");const f=document.createElement("button");f.classList.add("button__comment--delete"),f.setAttribute("commentIndex",e),f.textContent="삭제하기",f.setAttribute("onclick","deleteComment(this.getAttribute('commentIndex'))"),C.state!==LOGIN_REQUIRED&&C.userIndex===t||(E.style.display="none",f.style.display="none"),document.getElementsByClassName("button__comment")[u].appendChild(E),document.getElementsByClassName("button__comment")[u].appendChild(f);const R=document.createElement("button");R.classList.add("button__comment--write"),R.setAttribute("commentIndex",e),R.textContent="대댓글작성",R.setAttribute("onclick","writeChildComment(this.getAttribute('commentIndex'))"),document.getElementsByClassName("button__comment")[u].appendChild(R)}else if(!n){const n=document.createElement("li");n.classList.add("freeBoard__childComment"),document.getElementsByClassName("freeBoard__comment")[0].appendChild(n);const i=document.getElementsByClassName("freeBoard__childComment").length-1,c=document.createElement("p");c.classList.add("freeBoard__childComment--nickname"),c.textContent=a,document.getElementsByClassName("freeBoard__childComment")[i].appendChild(c);const l=document.createElement("p");l.classList.add("freeBoard__childComment--content"),o&&(l.textContent="삭제된 댓글입니다."),o||(l.textContent=s),document.getElementsByClassName("freeBoard__childComment")[i].appendChild(l);const d=document.createElement("p");d.classList.add("freeBoard__childComment--createDate"),d.textContent=r,document.getElementsByClassName("freeBoard__childComment")[i].appendChild(d);const m=document.createElement("section");m.classList.add("button__comment"),document.getElementsByClassName("freeBoard__childComment")[i].appendChild(m);const u=document.getElementsByClassName("freeBoard__rootComment").length+document.getElementsByClassName("freeBoard__childComment").length-1,C=await getUserInfo(),E=document.createElement("button");E.classList.add("button__comment--edit"),E.setAttribute("commentIndex",e),E.textContent="수정하기",E.setAttribute("onclick","editComment(this.getAttribute('commentIndex'))");const f=document.createElement("button");f.classList.add("button__comment--delete"),f.setAttribute("commentIndex",e),f.textContent="삭제하기",f.setAttribute("onclick","deleteComment(this.getAttribute('commentIndex'))"),console.log(`대댓글 ${e} ${C.userIndex}  ${t}`),C.state!==LOGIN_REQUIRED&&C.userIndex===t||(E.style.display="none",f.style.display="none"),document.getElementsByClassName("button__comment")[u].appendChild(E),document.getElementsByClassName("button__comment")[u].appendChild(f)}}async function writeComment(){if((await getUserInfo()).state===LOGIN_REQUIRED){await sweetAlert(WARNING,"로그인 필요","로그인 해주세요")&&(location.href="/user/login")}const{isConfirmed:e,value:t}=await Swal.fire({input:"textarea",title:"댓글 작성",inputPlaceholder:"2~500자 사이로 댓글을 작성해주세요.",inputAttributes:{"aria-label":"2~500자 사이로 댓글을 작성해주세요."},showCancelButton:!0,inputValidator:e=>e?e.length<2||e.length>500?`댓글은 2~500글자 사이로 작성해야합니다. 현재 ${e.length}자입니다.`:void 0:"내용을 입력해주세요."});if(e){const e=await getBoardIndex(),n=await writeCommentRequest(e,t);if(console.log(n),n.state===REQUEST_SUCCESS){await sweetAlert(SUCCESS,"댓글 작성 성공!","🤩")&&location.reload()}else if(n.state===LOGIN_REQUIRED){await sweetAlert(WARNING,"로그인 필요","로그인 해주세요")&&(location.href="/user/login")}else if(n.state===NOT_EXIST){await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제됐거나 존재하지않는 게시글입니다.")&&(location.href="/board")}else{await sweetAlert(ERROR,"댓글 작성 실패","예상치 못한 오류입니다.",`서버 메세지: ${n.state}`)&&location.reload()}}else await sweetAlert(CHECK,"댓글 작성 취소","warning")}async function writeChildComment(e){if((await getUserInfo()).state===LOGIN_REQUIRED){await sweetAlert(WARNING,"로그인 필요","로그인 해주세요")&&(location.href="/user/login")}const{isConfirmed:t,value:n}=await Swal.fire({input:"textarea",title:"대댓글 작성",inputPlaceholder:"2~500자 사이로 대댓글을 작성해주세요.",inputAttributes:{"aria-label":"2~500자 사이로 대댓글을 작성해주세요."},showCancelButton:!0,inputValidator:e=>e?e.length<2||e.length>500?`댓글은 2~500글자 사이로 작성해야합니다. 현재 ${e.length}자입니다.`:void 0:"내용을 입력해주세요."});if(t){const t=await getBoardIndex(),o=await writeCommentRequest(t,n,e);if(console.log(o),o.state===REQUEST_SUCCESS){await sweetAlert(SUCCESS,"댓글 작성 성공!","🤩")&&location.reload()}else if(o.state===LOGIN_REQUIRED){await sweetAlert(WARNING,"로그인 필요","로그인 해주세요")&&(location.href="/user/login")}else if(o.state===NOT_EXIST){await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제됐거나 존재하지않는 게시글입니다.")&&(location.href="/board")}else if(o.state===NO_COMMENT){await sweetAlert(WARNING,"존재하지 않는 댓글입니다.","삭제됐거나 존재하지않는 게시글입니다.")&&location.reload()}else{await sweetAlert(ERROR,"댓글 작성 실패","예상치 못한 오류입니다.",`서버 메세지: ${o.state}`)&&location.reload()}}else await sweetAlert(CHECK,"댓글 작성 취소","warning")}async function editComment(e){const t=await getBoardIndex(),n=await getComment(t,e);if(n.state===LOGIN_REQUIRED){await sweetAlert(WARNING,"로그인 필요","로그인 해주세요");location.href="/user/login"}else if(n.state===NOT_EXIST){await sweetAlert(WARNING,"게시글이 존재하지 않습니다.","삭제되거나 존재하지 않는 게시글");location.href="/board"}else if(n.state===NO_COMMENT){await sweetAlert(WARNING,"댓글이 존재하지 않습니다.","삭제되거나 존재하지 않는 댓글");location.href="/board"}else if(void 0!==n.commentContent){const{isConfirmed:t,value:o}=await Swal.fire({input:"textarea",title:"댓글 수정",inputValue:n.commentContent,inputPlaceholder:"2~500자 사이로 댓글을 작성해주세요.",inputAttributes:{"aria-label":"2~500자 사이로 댓글을 작성해주세요."},showCancelButton:!0,inputValidator:e=>e?e.length<2||e.length>500?`댓글은 2~500글자 사이로 작성해야합니다. 현재 ${e.length}자입니다.`:void 0:"내용을 입력해주세요."});if(t){const t=await getBoardIndex(),n=await editCommentRequest(t,e,o);if(console.log(n),n.state===REQUEST_SUCCESS){await sweetAlert(SUCCESS,"댓글 수정 성공!","🤩")&&location.reload()}else if(n.state===LOGIN_REQUIRED){await sweetAlert(WARNING,"로그인 필요","로그인 해주세요")&&(location.href="/user/login")}else if(n.state===NOT_EXIST){await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제됐거나 존재하지않는 게시글입니다.")&&(location.href="/board")}else{await sweetAlert(ERROR,"댓글 작성 실패","예상치 못한 오류입니다.",`서버 메세지: ${n.state}`)&&location.reload()}}else await sweetAlert(CHECK,"댓글 수정 취소","warning")}}async function deleteComment(e){const t=await getBoardIndex(),n=await deleteCommentRequest(t,e);if(n.state===LOGIN_REQUIRED){await sweetAlert(WARNING,"로그인 필요","로그인창으로 갑니다.")&&(location.href="/user/login")}else if(n.state===NOT_EXIST){await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제되거나 존재하지 않는 게시글입니다.")&&(location.href="/board")}else if(n.state===NO_COMMENT){await sweetAlert(WARNING,"존재하지 않는 댓글입니다.","삭제되거나 존재하지 않는 댓글입니다.")&&location.reload()}else if(n.state===NOT_AUTHORIZATION){await sweetAlert(WARNING,"권한이 없습니다.","해당 댓글을 작성한 유저가 아닙니다.")&&(location.href="/board")}else if(n.state===REQUEST_SUCCESS){await sweetAlert(SUCCESS,"댓글 삭제 성공","👌")&&location.reload()}else{await sweetAlert(ERROR,"게시물 삭제 오류","게시글 목록으로 돌아갑니다.",`서버 메세지: ${n.state}`)&&(location.href="/board")}}async function lifeCycle(){await detailBoard(),await detailComment(),window.onscroll=async function(){if(window.innerHeight+window.scrollY>=document.body.offsetHeight-1){const e=await getBoardIndex();let t;if(t=await getDetailComment(e,commentPage++),void 0!==t[0])for(let e in t)for(let e of t){const{commentIndex:t,userIndex:n,isRoot:o,isDeleted:a,nickname:s,commentContent:r,createDate:i}=e;await addComment(t,n,o,a,s,r,i)}else if(t.state!==NO_COMMENT){await sweetAlert(ERROR,"댓글 불러오기 실패","예상치 못한 오류입니다."`서버 메세지: ${t.state}`)}}}}lifeCycle();