const BACKEND_URL="http://localhost:13414",FRONT_URL="http://localhost:37866",GET="GET",POST="POST",PATCH="PATCH",DELETE="DELETE",OK=200,CREATED=201,NO_CONTENT=204,BAD_REQUEST=400,UNAUTHORIZED=401,FORBIDDEN=403,NOT_FOUND=404,CONFLICT=409,INTERNAL_SERVER_ERROR=500,FAIL_FETCH="fail_fetch",REQUEST_SUCCESS="request_success",LOGIN_REQUIRED="login_required",LOGIN="login",ALREADY_LOGIN="already_login",LOGOUT="logout",SIGN_UP="sign_up",INVALID_BODY="invalid_body",PW_MISMATCHED="pw_mismatched",NEW_PW_CONFIRM_MISMATCHED="pw/pw_confirm_mismatched",ONLY_IMAGE="only_jpg,jpeg,gjf,png(upper_5MB)_format_can_be_uploaded",DUPLICATED_NICKNAME="duplicated_nickname",NOT_EXIST="not_exist",NO_COMMENT="no_comment",FAVORITE="favorite +1",CANCEL_FAVORITE="cancel_favorite",NOT_AUTHORIZATION="not_authorization",NO_REGISTERED_INFORMATION="no_registered_information",INFO="info",ERROR="error",SUCCESS="success",WARNING="warning",QUESTION="question",CHECK="check";async function getSignUpGuide(){try{const e={mode:"cors",credentials:"include"},t=await fetch(`${BACKEND_URL}/user/sign-up/guide`,e);if(t.status===OK){return await t.text()}return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function signUpRequest(e,t,n,o,s,r,i){try{const c={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({id:e,pw:t,confirmPw:n,name:o,nickname:s,phoneNumber:r,gender:i})},a=await fetch(`${BACKEND_URL}/user/sign-up`,c);return await a.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function dropOutRequest(){try{const e={mode:"cors",method:DELETE,credentials:"include",headers:{"Access-Control-Allow-Headers":" Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"}},t=await fetch(`${BACKEND_URL}/user/drop-out`,e);if(204===t.status)return{state:REQUEST_SUCCESS};return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function loginRequest(e,t){try{const n={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type"},body:JSON.stringify({id:e,pw:t})},o=await fetch(`${BACKEND_URL}/user/login`,n);return await o.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function logoutRequest(){try{const e={mode:"cors",method:POST,credentials:"include"},t=await fetch(`${BACKEND_URL}/user/logout`,e);return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getUserLibrary(){try{const e={mode:"cors",credentials:"include"},t=await fetch(`${BACKEND_URL}/user/user-lib`,e);return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function reqRegisterUserLibrary(e){try{const t={mode:"cors",method:PATCH,credentials:"include"},n=await fetch(`${BACKEND_URL}/user/user-lib?libraryIndex=${e}`,t);if(n.status===OK)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function deleteUserLibrary(e){try{const t={mode:"cors",method:DELETE,credentials:"include"},n=await fetch(`${BACKEND_URL}/user/user-lib?libraryIndex=${e}`,t);return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editNicknameRequest(e){try{const t={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({nickname:e})},n=await fetch(`${BACKEND_URL}/user/profile/nickname`,t);if(n.status===OK)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editProfileImageRequest(e){try{const t={mode:"cors",method:PATCH,credentials:"include",body:e},n=await fetch(`${BACKEND_URL}/user/profile/profileImage`,t);if(n.status===OK)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editContactRequest(e){try{const t={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({phoneNumber:e})},n=await fetch(`${BACKEND_URL}/user/new-contact`,t);if(n.status===OK)return{state:REQUEST_SUCCESS};return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editPwRequest(e,t,n){try{const o={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({pw:e,newPw:t,confirmPw:n})},s=await fetch(`${BACKEND_URL}/user/new-pw`,o);if(s.status===OK)return{state:REQUEST_SUCCESS};return await s.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getUserInfo(){try{const e={mode:"cors",credentials:"include"},t=await fetch(`${BACKEND_URL}/user/info`,e);return await t.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function writeCommentRequest(e,t,n){try{let o;const s={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({content:t})};o=void 0===n?await fetch(`${BACKEND_URL}/comment/post?boardIndex=${e}`,s):await fetch(`${BACKEND_URL}/comment/post?boardIndex=${e}&parentIndex=${n}`,s);if(201===o.status)return{state:REQUEST_SUCCESS};return await o.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getDetailComment(e,t){try{const n={mode:"cors",credentials:"include"};if(void 0===t){const t=await fetch(`${BACKEND_URL}/comment?boardIndex=${e}`,n);return await t.json()}const o=await fetch(`${BACKEND_URL}/comment?boardIndex=${e}&page=${t}`,n);return await o.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function getComment(e,t){try{const n={mode:"cors",method:GET,credentials:"include"},o=await fetch(`${BACKEND_URL}/comment/edit?boardIndex=${e}&commentIndex=${t}`,n);return await o.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function editCommentRequest(e,t,n){try{const o={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({content:n})},s=await fetch(`${BACKEND_URL}/comment/edit?boardIndex=${e}&commentIndex=${t}`,o);if(s.status===OK)return{state:REQUEST_SUCCESS};return await s.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function deleteCommentRequest(e,t){const n={mode:"cors",method:DELETE,credentials:"include"},o=await fetch(`${BACKEND_URL}/comment/delete?boardIndex=${e}&commentIndex=${t}`,n);if(204===o.status)return{state:REQUEST_SUCCESS};return await o.json()}async function userCommentRequest(e){try{const t={mode:"cors",method:GET,credentials:"include"};if(void 0===e){const e=await fetch(`${BACKEND_URL}/comment/user`,t);return await e.json()}const n=await fetch(`${BACKEND_URL}/comment/user?page=${e}`,t);return await n.json()}catch(e){return console.log(`FETCH ERROR: ${e}`),{state:FAIL_FETCH}}}async function sweetAlert(e,t,n,o){let s=!1;if(e===INFO){const e=await Swal.fire({title:t,text:n,icon:"info",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(s=!0),s}if(e===SUCCESS){const e=await Swal.fire({title:t,text:n,icon:"success",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(s=!0),s}if(e===WARNING){if(o){const e=await Swal.fire({title:t,text:n,icon:"warning",confirmButtonColor:"#ffa07a",footer:o});return(e.isConfirmed||e.isDismissed)&&(s=!0),s}{const e=await Swal.fire({title:t,text:n,icon:"warning",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(s=!0),s}}if(e===ERROR){if(o){const e=await Swal.fire({title:t,text:n,icon:"error",confirmButtonColor:"#ffa07a",footer:o});return(e.isConfirmed||e.isDismissed)&&(s=!0),s}{const e=await Swal.fire({title:t,text:n,icon:"error",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(s=!0),s}}if(e===QUESTION){const e=await Swal.fire({title:t,text:n,icon:"question",confirmButtonColor:"#ffa07a"});return(e.isConfirmed||e.isDismissed)&&(s=!0),s}if(e===CHECK){Swal.mixin({toast:!0,position:"top-end",showConfirmButton:!1,timer:3e3,timerProgressBar:!0,didOpen:e=>{e.addEventListener("mouseenter",Swal.stopTimer),e.addEventListener("mouseleave",Swal.resumeTimer)}}).fire({icon:n,title:t})}}let userPage=2;async function userComment(){const e=await userCommentRequest();if(e.state===LOGIN_REQUIRED){if(await sweetAlert(WARNING,"로그인 필요","로그인이 필요한 기능입니다.")){const e="/user/login";location.href=e}}else if(e.state===NO_REGISTERED_INFORMATION){const e=document.createElement("li");e.classList.add("userResource--comment__list"),document.getElementsByClassName("userResource__comment--container")[0].appendChild(e);const t=document.createElement("p");t.classList.add("userResource__comment--title"),t.textContent="작성한 댓글이 없습니다.",document.getElementsByClassName("userResource--comment__list")[0].appendChild(t)}else if(void 0!==e[0])for(let t of e){const{commentIndex:e,boardIndex:n,postTitle:o,commentContent:s,createDate:r}=t;await addComment(o,s,r,n,e)}else{await sweetAlert(ERROR,"작성한 댓글 불러오기 실패","예상치 못한 오류입니다."`서버 메세지: ${e.state}`)&&(location.href="/")}}async function addComment(e,t,n,o,s){const r=document.createElement("li");r.classList.add("userResource__comment--list"),document.getElementsByClassName("userResource__comment--container")[0].appendChild(r);const i=document.getElementsByClassName("userResource__comment--list").length-1,c=document.createElement("a");c.classList.add("userResource__comment--href"),c.setAttribute("href",`/board/${o}`),document.getElementsByClassName("userResource__comment--list")[i].appendChild(c);const a=document.createElement("p");a.classList.add("userResource__comment--title"),a.textContent=`${e}`;const l=document.createElement("p");l.classList.add("userResource__comment--content"),l.textContent=`${t}`;const u=document.createElement("p");u.classList.add("userResource__comment--createDate"),u.textContent=`${n}`;const d=document.createElement("button");d.classList.add("button__userResource--delete"),d.setAttribute("boardIndex",o),d.setAttribute("commentIndex",s),d.setAttribute("onclick","deleteComment(this.getAttribute('boardIndex'),this.getAttribute('commentIndex'))"),d.innerHTML="삭제",document.getElementsByClassName("userResource__comment--href")[i].append(a),document.getElementsByClassName("userResource__comment--href")[i].append(l),document.getElementsByClassName("userResource__comment--href")[i].append(u),document.getElementsByClassName("userResource__comment--list")[i].append(d)}async function deleteComment(e,t){const n=await deleteCommentRequest(e,t);if(n.state===LOGIN_REQUIRED){await sweetAlert(WARNING,"로그인 필요","로그인창으로 갑니다.")&&(location.href="/user/login")}else if(n.state===NOT_EXIST){await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제되거나 존재하지 않는 게시글입니다.")&&(location.href="/comment/user")}else if(n.state===NO_COMMENT){await sweetAlert(WARNING,"존재하지 않는 댓글입니다.","삭제되거나 존재하지 않는 댓글입니다.")&&(location.href="/comment/user")}else if(n.state===NOT_AUTHORIZATION){await sweetAlert(WARNING,"권한이 없습니다.","해당 댓글을 작성한 유저가 아닙니다.")&&(location.href="/")}else if(n.state===REQUEST_SUCCESS){await sweetAlert(SUCCESS,"댓글 삭제 성공","🤗")&&location.reload()}else{await sweetAlert(ERROR,"게시물 삭제 오류","게시글 목록으로 돌아갑니다.",`서버 메세지: ${n.state}`)&&(location.href="/board")}}async function lifeCycle(){await userComment(),window.onscroll=async function(){if(window.innerHeight+window.scrollY>=document.body.offsetHeight-1){const e=await userCommentRequest(userPage++);if(e.state===LOGIN_REQUIRED){if(await sweetAlert(WARNING,"로그인 필요","로그인이 필요한 기능입니다.")){const e="/user/login";location.href=e}}else if(void 0!==e[0])for(let t of e){const{commentIndex:e,boardIndex:n,postTitle:o,commentContent:s,createDate:r}=t;await addComment(o,s,r,n,e)}else if(e.state!==NO_REGISTERED_INFORMATION){await sweetAlert(ERROR,"작성한 글 불러오기 실패","예상치 못한 오류입니다."`서버 메세지: ${e.state}`)&&(location.href="/")}}}}lifeCycle();